-- 언어별 개발자 분류하기
-- 비트연산자 사용
SELECT (
  CASE
    WHEN (SKILL_CODE & (SELECT SUM(CODE) FROM SKILLCODES WHERE CATEGORY LIKE 'FRONT%')) 
      AND SKILL_CODE & (SELECT CODE FROM SKILLCODES WHERE NAME = 'PYTHON') THEN 'A'
    WHEN SKILL_CODE & (SELECT CODE FROM SKILLCODES WHERE NAME = 'C#') THEN 'B'
    WHEN SKILL_CODE & (SELECT SUM(CODE) FROM SKILLCODES WHERE CATEGORY LIKE 'FRONT%') THEN 'C'
    ELSE NULL
  END) AS GRADE, ID, EMAIL
FROM DEVELOPERS
GROUP BY GRADE, ID, EMAIL
  HAVING GRADE IS NOT NULL
ORDER BY GRADE, ID;


-- 1 OR 0으로 판별
SELECT CASE
  WHEN SUM(CASE WHEN a.CATEGORY = 'Front End' THEN 1 ELSE 0 END) > 0 AND 
    SUM(CASE WHEN a.NAME = 'Python' THEN 1 ELSE 0 END) > 0 THEN 'A'
  WHEN SUM(CASE WHEN a.NAME = 'C#' THEN 1 ELSE 0 END) > 0 THEN 'B'
  WHEN SUM(CASE WHEN a.CATEGORY = 'Front End' THEN 1 ELSE 0 END) > 0 THEN 'C' 
END AS GRADE, b.ID, b.EMAIL
FROM SKILLCODES AS a LEFT OUTER JOIN DEVELOPERS AS b
ON a.CODE & b.SKILL_CODE
GROUP BY b.ID, b.EMAIL
HAVING GRADE IS NOT null
ORDER BY GRADE ASC, b.ID ASC;



-- 비트연산자 & 가상테이블 사용
WITH T AS (
    SELECT
        IF(SKILL_CODE & (SELECT SUM(CODE) FROM SKILLCODES WHERE CATEGORY = 'Front End' GROUP BY CATEGORY) AND SKILL_CODE & (SELECT CODE FROM SKILLCODES WHERE NAME = 'Python'), 'A',
           IF (SKILL_CODE & (SELECT CODE FROM SKILLCODES WHERE NAME = 'C#'), 'B',
              IF (SKILL_CODE & (SELECT SUM(CODE) FROM SKILLCODES WHERE CATEGORY = 'Front End' GROUP BY CATEGORY), 'C', NULL)
              )
          ) AS GRADE, ID, EMAIL
    FROM DEVELOPERS
)
SELECT GRADE, ID, EMAIL FROM T WHERE GRADE IS NOT NULL ORDER BY GRADE, ID;




--  가상테이블 사용
WITH 
    SKILLS AS (
        SELECT a.ID, b.NAME, b.CATEGORY
        FROM 
            DEVELOPERS a, SKILLCODES b
            WHERE a.SKILL_CODE & b.CODE > 0
    ),
    FRONTEND_DEV AS (
        SELECT DISTINCT ID
        FROM SKILLS
        WHERE CATEGORY = "Front End"
    ),
    PYTHON_DEV AS (
        SELECT DISTINCT ID
        FROM SKILLS
        WHERE NAME = "Python"
    ),
    GRADE_A AS (
        SELECT DISTINCT a.ID
        FROM FRONTEND_DEV a, PYTHON_DEV b
        WHERE a.ID = b.ID
    ),
    GRADE_B AS (
        SELECT DISTINCT ID
        FROM SKILLS
        WHERE 
            NAME = "C#" 
            AND ID NOT IN (SELECT * FROM GRADE_A)
    ),
    GRADE_C AS (
        SELECT ID
        FROM FRONTEND_DEV
        WHERE ID NOT IN (
            SELECT ID FROM GRADE_A 
            UNION
            SELECT ID FROM GRADE_B
        )
    ),
    ABC_DEVELOPERS AS (
        SELECT "A" AS GRADE, a.ID
        FROM GRADE_A a
        UNION ALL
        SELECT "B" AS GRADE, b.ID
        FROM GRADE_B b
        UNION ALL
        SELECT "C" AS GRADE, c.ID
        FROM GRADE_C c
    )
SELECT a.GRADE, a.ID, b.EMAIL
FROM ABC_DEVELOPERS a, DEVELOPERS b
WHERE a.ID = b.ID
ORDER BY a.GRADE, a.ID;